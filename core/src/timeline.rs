use crate::easing::Easing;

/// An animator timeline.
pub trait Timeline {
    /// Type of animator values (animation properties) tracked by the timeline. This is normally one
    /// of the types generated by the [`Animate`](../../mina_macros/derive.Animate.html) macro, e.g.
    /// for an animatable struct `Foo` there will be a generated `FooAnimatorValues` and the latter
    /// type will be the type parameter for the `Timeline`.
    type Values;

    /// Gets the values of all animatable properties at a given `time`.
    ///
    /// # Arguments
    ///
    /// * `time` - Time in the same unit scale as the timeline's duration, generally seconds.
    fn values_at(&self, time: f32) -> Self::Values;
}

/// A single frame of an animation timeline, specifying some or all of the animation property values
/// at a given point in time.
///
/// Keyframes are actually an intermediate type used by the
/// [`Animate`](../../mina_macros/derive.Animate.html) macro when constructing [Timeline] instances.
/// They are not meant to be created or consumed directly. Instead, the `Animate` decorated type
/// will expose trait functions for creating keyframes as part of the timeline builder.
pub struct Keyframe<Data> {
    pub(super) data: Data,
    pub(super) easing: Option<Easing>,
    pub(super) normalized_time: f32,
}

impl<Data> Keyframe<Data> {
    pub(super) fn new(normalized_time: f32, data: Data, easing: Option<Easing>) -> Self {
        Self {
            normalized_time,
            data,
            easing,
        }
    }
}
